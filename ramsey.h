#include "defs.h"   /* constant definitions generated by gendefs.py */
#include "dSFMT.h"

#define R_RAND() dsfmt_genrand_close_open(&R_rstate)
        
/* Strucure to store the configuration of one replica */
typedef struct
{
    int sp[NED];
    int h2[NED];
    int nb[NSGR];   /* number of blue edges in each R-subgraph */
    int nr[NSGS];   /* number of red edges in each S-subgraph */
    int en;         /* number of blue S-cliques and red R-cliques */
} rep_t;

extern dsfmt_t R_rstate;   /* state of random number generator (RNG) */

/* Call R_init() first, and R_finalize() to free memory when done */
void R_init(uint32_t seed);
void R_finalize();

/* Initialize replica with all edges blue */
void R_init_replica(rep_t *p);  

/*
 * Initialize replica using configuration from a .graph file. If the file
 * specifies a graph with fewer than NV vertices, the unspecified edges will be
 * blue. Returns the number of spins read from the file (this number can be
 * passed as the "mask" argument to R_randomize to prevent these spins from
 * being randomized).
 */
int R_init_replica_from_file(rep_t *p, char filename[]);

/* Randomize spins with indices greater than "mask" */
void R_randomize(rep_t *p, double p_red, int mask);

/* Flip spin at edge "iedge" (note this does NOT update the energy) */
void R_flip(rep_t *p, int iedge);

/* Save graph to file */
void R_save_graph(int sp[], char filename[]);
